#! /usr/bin/env python

import sys
import yaml
from os.path import basename
from colormath.color_objects import LCHabColor, RGBColor

settings = {}

def lch_to_hex(lch_color):
    return lch_color.convert_to('rgb').get_rgb_hex().upper()

def hex_to_lch(hex_color):
    rgb_color = RGBColor()
    rgb_color.set_from_rgb_hex(hex_color)
    return rgb_color.convert_to('lchab')

def print_lch(name, value):
    print('{}: "{}"'.format(name, lch_to_hex(value)))

def make_scheme():
    hex_bg = settings['background']
    hex_fg = settings['foreground']
    num_colors = settings['num_colors']
    color_chroma = settings['color_chroma']

    lch_bg = hex_to_lch(hex_bg)
    bg_L, bg_C, bg_h = lch_bg.get_value_tuple()

    lch_fg = hex_to_lch(hex_fg)
    fg_L, fg_C, fg_h = lch_fg.get_value_tuple()

    for name, value in [('background', lch_bg), ('foreground', lch_fg)]:
        print_lch(name, value)

    lightness = {'background' : bg_L, 'foreground' : fg_L}
    monotones = settings['monotones']
    for elt in monotones:
        relative = elt['relative']
        delta = elt['delta']
        name = elt['name']
        rel_L = lightness[relative]
        elt_L = rel_L + delta
        if relative == 'background':
            elt_C = bg_C
            elt_h = bg_h
        else:
            elt_C = fg_C
            elt_h = fg_h
        lch_elt = LCHabColor(elt_L, elt_C, elt_h)
        print_lch(name, lch_elt)

    hue_step = 360 / num_colors
    color_hues = [hue_step * i for i in range(num_colors)]

    col_idx = 1
    for col_h in color_hues:
        lch_col = LCHabColor(fg_L, color_chroma, col_h)
        print('color{}: "{}"'.format(col_idx, lch_to_hex(lch_col)))
        col_idx = col_idx + 1

def usage():
    print('''
SYNOPSIS
    {} COLOR_PROFILE
'''.format(basename(sys.argv[0])))
    sys.exit(1)

def main():
    global settings
    args = sys.argv[1:]
    if len(args) < 1:
        usage()
    with open(args[0], 'r') as f:
        settings = yaml.load(f.read())
    make_scheme()

if __name__ == '__main__':
    main()
