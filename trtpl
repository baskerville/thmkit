#! /usr/bin/env python

import re
import sys
import yaml
import jinja2
from os import walk, mkdir
from os.path import basename, exists, isdir, join, relpath, normpath, splitext
from getopt import getopt
from colormath.color_objects import RGBColor, LCHabColor

color_scheme = {}
output_dir = 'outputs'
templates_dir = 'templates'
filename_suffix = ''
preserve_extensions = False
exclude_pattern = None

def lch_to_hex(lch_color):
    return lch_color.convert_to('rgb').get_rgb_hex().upper()

def raw_hex(hex_color):
    return hex_color[1:]

def slashed_hex(hex_color):
    grps = re.match('#(..)(..)(..)', hex_color).groups()
    return 'rgb:{}/{}/{}'.format(*grps)

def raw_rgb(hex_color):
    rgb_color = RGBColor()
    rgb_color.set_from_rgb_hex(hex_color)
    return '{} {} {}'.format(*rgb_color.get_value_tuple())

def alter_lch(hex_color, value, component='L', relative=True):
    rgb_color = RGBColor()
    rgb_color.set_from_rgb_hex(hex_color)
    lch_color = rgb_color.convert_to('lchab')
    lch_lst = list(lch_color.get_value_tuple())
    comp_idx = ('L', 'C', 'H').index(component)
    if relative:
        lch_lst[comp_idx] = lch_lst[comp_idx] + value
    else:
        lch_lst[comp_idx] = value
    L, C, H = lch_lst
    lch_res = LCHabColor(L, C, H)
    return lch_to_hex(lch_res)

def tune_lightness(hex_color, value):
    return alter_lch(hex_color, value)

def set_lightness(hex_color, value):
    return alter_lch(hex_color, value, relative=False)

def tune_chroma(hex_color, value):
    return alter_lch(hex_color, value, component='C')

def set_chroma(hex_color, value):
    return alter_lch(hex_color, value, component='C', relative=False)

def tune_hue(hex_color, value):
    return alter_lch(hex_color, value, component='H')

def set_hue(hex_color, value):
    return alter_lch(hex_color, value, component='H', relative=False)

def template_filter(tpl_pth):
    return exclude_pattern == None or re.match(exclude_pattern, tpl_pth) == None

def copy_dirs(src, dst):
    for root, dirnames, filenames in walk(src):
        for name in dirnames:
            pth = normpath(join(dst, relpath(root, templates_dir), name))
            if not exists(pth):
                mkdir(pth)

def translate_templates():
    ldr = jinja2.FileSystemLoader(templates_dir)
    env = jinja2.Environment(loader=ldr)
    env.filters['slashedhex'] = slashed_hex
    env.filters['rawhex'] = raw_hex
    env.filters['rawrgb'] = raw_rgb
    env.filters['L'] = tune_lightness
    env.filters['_L'] = set_lightness
    env.filters['C'] = tune_chroma
    env.filters['_C'] = set_chroma
    env.filters['H'] = tune_hue
    env.filters['_H'] = set_hue

    if not exists(output_dir):
        mkdir(output_dir)
    elif not isdir(output_dir):
        print('not a directory: {}'.format(output_dir), file=sys.stderr)
        sys.exit(1)

    copy_dirs(templates_dir, output_dir)
    
    for tpl_pth in env.list_templates(filter_func=template_filter):
        tpl = env.get_template(tpl_pth)
        output_root = tpl_pth
        if not preserve_extensions:
            output_root, ext = splitext(tpl_pth)
        output_pth = '{}/{}{}'.format(output_dir, output_root, filename_suffix)
        with open(output_pth, 'w') as f:
            f.write(tpl.render(color_scheme))

def usage():
    print('''
SYNOPSIS
    {} [OPTIONS] TEMPLATE_DIR

OPTIONS
    -h, --help
        Show this message.

    -c, --color-scheme COLOR_SCHEME
        Read colors from the given file.

    -o, --output-directory OUTPUT_DIR
        Define where the compiled templates will be stored.

    -s, --filename-suffix SUFFIX
        Add the given suffix to the output file names.

    -e, --exclude-templates REGEXP
        Exclude templates matching the given pattern.

    -p, --preserve-extensions
        Preserve templates file name extensions in outputs.
'''.format(basename(sys.argv[0])))
    sys.exit(1)

def main():
    global color_scheme, output_dir, templates_dir, filename_suffix, exclude_pattern, preserve_extensions
    opts, args = getopt(sys.argv[1:], 'hpc:o:s:e:', ['help', 'preserve-extensions', 'color-scheme=', 'output-directory=', 'filename-suffix=', 'exclude-templates='])

    if len(args) < 1:
        usage()

    templates_dir = args[0]

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-c', '--color-scheme'):
            with open(val, 'r') as f:
                color_scheme.update(yaml.load(f.read()))
        elif opt in ('-o', '--output-directory'):
            output_dir = val
        elif opt in ('-s', '--filename-suffix'):
            filename_suffix = val
        elif opt in ('-e', '--exclude-templates'):
            exclude_pattern = val
        elif opt in ('-p', '--preserve-extensions'):
            preserve_extensions = True

    translate_templates()

if __name__ == '__main__':
    main()
