#! /usr/bin/env python3

import os
import re
import sys
import yaml
import jinja2
from os import walk, mkdir
from os.path import basename, exists, isdir, join, relpath, normpath, splitext
from getopt import getopt
from colormath.color_objects import LabColor, LCHabColor, LuvColor

color_scheme = {}
custom_filters = {}
output_dir = 'output'
templates_dir = 'templates'
filename_suffix = ''
preserve_extensions = False

try:
    filters_dir = os.getenv("TRTPL_FILTERS_DIR")
    if filters_dir is not None:
        sys.path.insert(1, filters_dir);
        from color_filters import *
        sys.path.pop(1)
except:
    pass

def copy_dirs(src, dst):
    for root, dirnames, filenames in walk(src):
        for name in dirnames:
            pth = normpath(join(dst, relpath(root, templates_dir), name))
            if not exists(pth):
                mkdir(pth)

def normalize_values():
    global color_scheme
    for name, value in color_scheme.items():
        if re.match('^\w+:[^:]+$', value):
            color_space, color_components = value.split(':')
            color_tuple = map(float, re.split('[, ]+', color_components.strip()))
            if color_space == 'LCH':
                source_color = LCHabColor(*color_tuple)
            elif color_space == 'Lab':
                source_color = LabColor(*color_tuple)
            elif color_space == 'Luv':
                source_color = LuvColor(*color_tuple)
            color_scheme[name] = source_color.convert_to('rgb').get_rgb_hex()

def translate_templates():
    ldr = jinja2.FileSystemLoader(templates_dir)
    env = jinja2.Environment(loader=ldr)
    env.filters.update(custom_filters)
    normalize_values()

    if not exists(output_dir):
        mkdir(output_dir)
    elif not isdir(output_dir):
        print('not a directory: {}'.format(output_dir), file=sys.stderr)
        sys.exit(1)

    copy_dirs(templates_dir, output_dir)

    for tpl_pth in env.list_templates():
        tpl = env.get_template(tpl_pth)
        output_root = tpl_pth if preserve_extensions else splitext(tpl_pth)[0]
        output_pth = '{}/{}{}'.format(output_dir, output_root, filename_suffix)
        with open(output_pth, 'w') as f:
            f.write(tpl.render(color_scheme, **globals()))

def usage():
    print('''
SYNOPSIS
    {} [OPTIONS] TEMPLATE_DIR

OPTIONS
    -h, --help
        Show this message.

    -c, --color-scheme COLOR_SCHEME
        Read colors from the given file.

    -o, --output-directory OUTPUT_DIR
        Define where the compiled templates will be stored.

    -s, --filename-suffix SUFFIX
        Add the given suffix to the output file names.

    -p, --preserve-extensions
        Preserve templates file name extensions in outputs.
'''.format(basename(sys.argv[0])))
    sys.exit(1)

def main():
    global color_scheme, output_dir, templates_dir, filename_suffix, preserve_extensions
    opts, args = getopt(sys.argv[1:], 'hpc:o:s:', ['help', 'preserve-extensions', 'color-scheme=', 'output-directory=', 'filename-suffix='])

    if len(args) < 1:
        usage()

    templates_dir = args[0]

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-c', '--color-scheme'):
            with open(val, 'r') as f:
                color_scheme.update(yaml.load(f.read()))
        elif opt in ('-o', '--output-directory'):
            output_dir = val
        elif opt in ('-s', '--filename-suffix'):
            filename_suffix = val
        elif opt in ('-p', '--preserve-extensions'):
            preserve_extensions = True

    translate_templates()

if __name__ == '__main__':
    main()
