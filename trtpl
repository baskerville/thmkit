#! /usr/bin/env python

import re
import sys
import yaml
import jinja2
from os import mkdir
from os.path import basename, exists, isfile
from getopt import getopt
from colormath.color_objects import RGBColor, LCHabColor

color_scheme = {}
output_dir = 'outputs'
templates_dir = 'templates'

def lch_to_hex(lch_color):
    return lch_color.convert_to('rgb').get_rgb_hex().upper()

def raw_hex(hex_color):
    return hex_color[1:]

def slashed_hex(hex_color):
    grps = re.match('#(..)(..)(..)', hex_color).groups()
    return 'rgb:{}/{}/{}'.format(*grps)

def tune_lightness(hex_color, delta):
    rgb_color = RGBColor()
    rgb_color.set_from_rgb_hex(hex_color)
    lch_color = rgb_color.convert_to('lchab')
    (L, C, h) = lch_color.get_value_tuple()
    lch_tuned = LCHabColor(L + delta, C, h)
    return lch_to_hex(lch_tuned)
    
def raw_rgb(hex_color):
    rgb_color = RGBColor()
    rgb_color.set_from_rgb_hex(hex_color)
    return '{} {} {}'.format(*rgb_color.get_value_tuple())

def translate_templates():
    ldr = jinja2.FileSystemLoader(templates_dir)
    env = jinja2.Environment(loader=ldr)
    env.filters['slashedhex'] = slashed_hex
    env.filters['rawhex'] = raw_hex
    env.filters['rawrgb'] = raw_rgb
    env.filters['L'] = tune_lightness

    if not exists(output_dir):
        mkdir(output_dir)
    elif isfile(output_dir):
        print('not a directory: {}'.format(output_dir), file=sys.stderr)
        sys.exit(1)
    
    for tpl_pth in ldr.list_templates():
        tpl = env.get_template(tpl_pth)
        output_pth = '{}/{}'.format(output_dir, tpl_pth)
        with open(output_pth, 'w') as f:
            f.write(tpl.render(color_scheme))

def usage():
    print('''
SYNOPSIS
    {} [OPTIONS] TEMPLATE_DIR

OPTIONS
    -h, --help
        Show this message.

    -c, --color-scheme COLOR_SCHEME
        Read colors from the given file.

    -o, --output-directory OUTPUT_DIR
        Define where the compiled templates will be stored.
'''.format(basename(sys.argv[0])))
    sys.exit(1)

def main():
    global color_scheme, output_dir, templates_dir
    opts, args = getopt(sys.argv[1:], 'hc:o:', ['help', 'color-scheme=', 'output-directory='])

    if len(args) < 1:
        usage()

    templates_dir = args[0]

    for opt, val in opts:
        if opt in ('-h', '--help'):
            usage()
        elif opt in ('-c', '--color-scheme'):
            with open(val, 'r') as f:
                color_scheme = yaml.load(f.read())
        elif opt in ('-o', '--output-directory'):
            output_dir = val

    translate_templates()

if __name__ == '__main__':
    main()
